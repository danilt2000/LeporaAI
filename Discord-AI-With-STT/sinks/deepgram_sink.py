import asyncio
from asyncio import Queue
from enum import Enum
import json
import time
import functools
# 3rd party
from discord import VoiceClient
from discord.sinks.core import Filters, Sink, default_filters
from deepgram import (
    DeepgramClient,
    DeepgramClientOptions,
    LiveTranscriptionEvents,
    LiveOptions,
)
import websockets
import globals

messages_queue_global = asyncio.Queue() 
# globals.messagePathToSpeakGlobal = "" 

class Speaker():
    class SpeakerState(Enum):
        RUNNING = 1
        TRANSCRIBE = 2
        FINALIZE = 3
        STOP = 4

    def __init__(self, loop: asyncio.BaseEventLoop, out_queue: Queue, deepgram_API_key: str,
                 sentence_end=300,  # 5 –º–∏–Ω—É—Ç (–ø—Ä–∏–º–µ—Ä–Ω–æ)
                 utterance_end=1000  # 10 –º–∏–Ω—É—Ç (–ø—Ä–∏–º–µ—Ä–Ω–æ)
                 ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ø–∏–∫–µ—Ä–∞.
        :param loop: event loop
        :param out_queue: –æ—á–µ—Ä–µ–¥—å, –∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        :param deepgram_API_key: –≤–∞—à Deepgram API –∫–ª—é—á
        :param sentence_end: —á–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ –º—Å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–π —Ç–∏—à–∏–Ω—ã –≤—Å—Ç–∞–≤–ª—è—Ç—å ¬´–ø–∞–∫–µ—Ç —Ç–∏—à–∏–Ω—ã¬ª (–¥–ª—è VAD)
        :param utterance_end: —á–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ –º—Å –±–µ–∑ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Ñ–∏–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—ã—Å–∫–∞–∑—ã–≤–∞–Ω–∏–µ
        """
        self.loop = loop
        self.queue = out_queue
        self.deepgram_API_key = deepgram_API_key

        self.sentence_end = sentence_end
        self.utterance_end = utterance_end

        self.user = None
        self.data = []
        self.new_bytes = False
        self.isNeededRetry = False
        self.messages_queue = Queue()
        self.last_byte = 0

        # –ü–∞–∫–µ—Ç —Ç–∏—à–∏–Ω—ã (fake audio), —á—Ç–æ–±—ã Deepgram –ø–æ–Ω–∏–º–∞–ª, —á—Ç–æ —Ä–µ—á—å –ø—Ä–µ—Ä–≤–∞–ª–∞—Å—å
        self.silent_packet = b"\x00" * 320

        self.state = self.SpeakerState.RUNNING

    def add_user(self, user_id):
        self.user = user_id
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é –∫ Deepgram
        self.loop.create_task(self.deep_stream())

    def add_data(self, data, current_time):
        self.data.append(data)
        self.new_bytes = True
        self.last_byte = current_time

    def add_silence(self):
        self.data.append(self.silent_packet)

    def reset_data(self):
        self.data = []
        self.new_bytes = False

    async def deep_stream(self):
        """
        –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã —Å Deepgram. –°–æ–∑–¥–∞–µ—Ç websocket –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç
        —Å–æ–±—ã—Ç–∏—è, –ø—Ä–∏—Ö–æ–¥—è—â–∏–µ –æ—Ç Deepgram (–ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ/—Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã).
        """
        
        outer = self
        global is_finals
        global queue
        global user
        global isNeededRetry
        global messages_queue

        user = self.user
        queue = self.queue
        isNeededRetry = self.isNeededRetry
        messages_queue = self.messages_queue
        is_finals = []

        try:
            config: DeepgramClientOptions = DeepgramClientOptions(
                options={"keepalive": "true"},
            )
            deepgram: DeepgramClient = DeepgramClient(self.deepgram_API_key, config)
            dg_connection = deepgram.listen.asyncwebsocket.v("1")

            # --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π Deepgram ---
            async def on_open(self, open, **kwargs):
                print("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Deepgram —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")

            async def on_message(self, result, **kwargs):
                global is_finals
                global queue
                sentence = result.channel.alternatives[0].transcript
                if len(sentence) == 0:
                    return
                if result.is_final:
                    # –ß–∞—Å—Ç–∏—á–Ω–æ–µ —Ñ–∏–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—ã—Å–∫–∞–∑—ã–≤–∞–Ω–∏–µ
                    is_finals.append(sentence)
                    if result.speech_final:
                        # –ü–æ–ª–Ω–æ–µ –æ–∫–æ–Ω—á–∞–Ω–∏–µ —Ä–µ—á–∏
                        utterance = " ".join(is_finals)
                        print(f"–û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–∞—è —Ä–µ—á—å: {utterance}")
                    else:
                        print(f"–§–∏–Ω–∞–ª—å–Ω—ã–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç: {sentence}")
                else:
                    globals.isUserInterrupting = True
                    await messages_queue_global.put({"user": 0, "result": sentence, "type": "Intermediate speech"})
                    print(f"–ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {sentence}")

            async def on_metadata(self, metadata, **kwargs):
                print(f"–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: {metadata}")

            async def on_speech_started(self, speech_started, **kwargs):
                print("–ù–∞—á–∞–ª–æ —Ä–µ—á–∏.")

            async def on_utterance_end(self, utterance_end, **kwargs):
                global is_finals
                global queue
                global user
                global messages_queue

                print("–ö–æ–Ω–µ—Ü —Ñ—Ä–∞–∑—ã (Utterance End).")

                if len(is_finals) > 0:
                    utterance = " ".join(is_finals)
                    print(f"–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—Ä–∞–∑–∞: {utterance}")
                    await queue.put({"user": user, "result": utterance})
                    await messages_queue.put({"user": user, "result": utterance})
                    await messages_queue_global.put({"user": user, "result": utterance})
                    is_finals = []

            async def on_close(self, close, **kwargs):
                print(f"\n\n{close}\n\n")
                reason = getattr(close, "reason", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞")
                code = getattr(close, "code", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–æ–¥")
                print(f"üî¥ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Deepgram –∑–∞–∫—Ä—ã—Ç–æ. –ö–æ–¥: {code}, –ü—Ä–∏—á–∏–Ω–∞: {reason}")
                print("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Deepgram –∑–∞–∫—Ä—ã—Ç–æ.")
                global isNeededRetry
                isNeededRetry = True
                outer.isNeededRetry = True
                # self.state = self.SpeakerState.STOP

            async def on_error(self, error, **kwargs):
                print(f"–û—à–∏–±–∫–∞ –æ—Ç Deepgram: {error}")

            async def on_unhandled(self, unhandled, **kwargs):
                print(f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {unhandled}")

            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            dg_connection.on(LiveTranscriptionEvents.Open, on_open)
            dg_connection.on(LiveTranscriptionEvents.Transcript, on_message)
            dg_connection.on(LiveTranscriptionEvents.Metadata, on_metadata)
            dg_connection.on(LiveTranscriptionEvents.SpeechStarted, on_speech_started)
            dg_connection.on(LiveTranscriptionEvents.UtteranceEnd, on_utterance_end)
            dg_connection.on(LiveTranscriptionEvents.Close, on_close)
            dg_connection.on(LiveTranscriptionEvents.Error, on_error)
            dg_connection.on(LiveTranscriptionEvents.Unhandled, on_unhandled)

            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è.
            # –î–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞: language="ru"
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º utterance_end_ms –∏ endpointing, —á—Ç–æ–±—ã —Ä–µ–¥–∫–æ –∑–∞–≤–µ—Ä—à–∞—Ç—å —Ä–µ—á—å
            options: LiveOptions = LiveOptions(
                model="nova-3",         # –ø—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –º–æ–¥–µ–ª—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä—É—Å—Å–∫–∏–π
                language="multi",          # RU
                smart_format=True,
                encoding="linear16",
                channels=2,
                sample_rate=48000,
                interim_results=True,
                utterance_end_ms=f"{self.utterance_end}",  # (–∑–¥–µ—Å—å 600000 –º—Å = 600—Å = 10 –º–∏–Ω)
                vad_events=True,
                endpointing=self.sentence_end,            # (–∑–¥–µ—Å—å 300000 –º—Å = 5 –º–∏–Ω)
            )

            addons = {
                "no_delay": "true"
            }

            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Deepgram c –Ω—É–∂–Ω—ã–º–∏ –æ–ø—Ü–∏—è–º–∏
            if await dg_connection.start(options, addons=addons) is False:
                print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Deepgram.")
                return

            # async def keep_alive():
            #         while True:
            #             await asyncio.sleep(10)
            #             try:
            #                 await dg_connection.send(b"")
            #                 print("üîÑ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω keep-alive –ø–∞–∫–µ—Ç (—Ç–∏—à–∏–Ω–∞).")
            #             except Exception as e:
            #                 print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ keep-alive: {e}")

            # self.loop.create_task(keep_alive())

            # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª, –ø–æ–∫–∞ –æ–±—ä–µ–∫—Ç –Ω–µ –ø–µ—Ä–µ–≤–µ–¥—ë–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ STOP
            while self.state != self.SpeakerState.STOP:
                if self.state == self.SpeakerState.TRANSCRIBE:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                    await dg_connection.send(b"".join(self.data))
                    self.reset_data()
                    self.state = self.SpeakerState.RUNNING

                elif self.state == self.SpeakerState.FINALIZE:
                    # –Ø–≤–Ω–∞—è —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è, –µ—Å–ª–∏ –º—ã —Ö–æ—Ç–∏–º –∑–∞–∫—Ä—ã—Ç—å —Ñ—Ä–∞–∑—É
                    await dg_connection.finalize()
                    self.reset_data()
                    self.state = self.SpeakerState.RUNNING
                if isNeededRetry:
                    await dg_connection.finish()
                    await asyncio.sleep(1)
                    break
                else:
                    # –Ω–µ–º–Ω–æ–∂–∫–æ –∂–¥–µ–º, —á—Ç–æ–±—ã –Ω–µ –Ω–∞–≥—Ä—É–∂–∞—Ç—å —Ü–∏–∫–ª
                    await asyncio.sleep(.005)

            # –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ STOP ‚Äî –∑–∞–≤–µ—Ä—à–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
            await dg_connection.finish()
            await asyncio.sleep(1)

        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Å–æ–∫–µ—Ç –∫ Deepgram: {e}")
            return

class DeepgramSink(Sink):

    class SinkSettings:
        def __init__(self,
                     deepgram_API_key: str,
                    sentence_end=500,
                    utterence_end= 1000,
                    data_length=25000,
                     max_speakers=-1):
            """
            :param deepgram_API_key: Deepgram API –∫–ª—é—á
            :param sentence_end: –ü–æ—Å–ª–µ –∫–∞–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è –≤—Å—Ç–∞–≤–ª—è—Ç—å "—Ç–∏—à–∏–Ω—É" (–º—Å)
            :param utterence_end: –ü–æ—Å–ª–µ –∫–∞–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è —Ñ–∏–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ñ—Ä–∞–∑—É (–º—Å)
            :param data_length: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –±—É—Ñ–µ—Ä–∞ (–±–∞–π—Ç)
            :param max_speakers: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ —Å–ø–∏–∫–µ—Ä–æ–≤ (-1 = –±–µ–∑ –ª–∏–º–∏—Ç–∞)
            """
            self.deepgram_API_key = deepgram_API_key
            self.sentence_end = sentence_end
            self.utterence_end = utterence_end
            self.data_length = data_length
            self.max_speakers = max_speakers

    def __init__(self, *,
                 filters=None,
                 sink_settings: SinkSettings,
                 queue: asyncio.Queue,
                 loop: asyncio.AbstractEventLoop, voice: VoiceClient):
        if filters is None:
            filters = default_filters
        self.filters = filters
        Filters.__init__(self, **self.filters)
        self.lock = asyncio.Lock()
        self.sink_settings = sink_settings
        self.queue = queue
        self.loop = loop
        self.connected_clients = set()
        self.vc = None
        self.running = True

        self.voice_queue = Queue()
        
        self.speakers = []

        self.loop.create_task(self.start_local_server(voice))

        self.loop.create_task(self.insert_voice())

        self.loop.create_task(self.start_processing())

    async def local_server(self, websocket, voice ):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö WebSocket-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π."""
        self.connected_clients.add(websocket)  
        try:
            async for message in websocket:
                if message == "STOP":
                    # if voice.is_playing():  
                    voice.stop()
                # data = json.loads(message)
                # print(f"üì• –ü–æ–ª—É—á–µ–Ω–æ –æ—Ç {data['user']}: {data['result']}")
                print(f"üì• –ü–æ–ª—É—á–µ–Ω–æ {message}")
                data = json.loads(message)
                globals.userMessages = data.get("UserMessages")
                globals.aiAnswer = data.get("AiAnswer")
                globals.messagePathToSpeakGlobal = data.get("CurrentSpeakAudioPath")

        except websockets.exceptions.ConnectionClosedError:
            print("üö´ –ö–ª–∏–µ–Ω—Ç –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ –∑–∞–∫—Ä—ã–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        finally:
            self.connected_clients.discard(websocket)
            print("üì• –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
    
    async def process_queue(self):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ messages_queue_global –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
        –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Ö –≤ WebSocket.
        """
        while True:
            try:
                message = await messages_queue_global.get()  # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                
                if message is not None:
                    message_json = json.dumps(message, ensure_ascii=False)
                    
                    for ws in self.connected_clients:
                        try:
                            await ws.send(message_json)
                            print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ WebSocket: {message_json}")
                        except Exception as ws_error:
                            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ WebSocket: {ws_error}")

                    messages_queue_global.task_done()  # –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
                
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏: {e}")

    async def start_processing(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—á–µ—Ä–µ–¥–∏ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ"""
        asyncio.create_task(self.process_queue())  # –ó–∞–ø—É—Å–∫ –±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞

    async def start_local_server(self, voice):
        """–ó–∞–ø—É—Å–∫ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ WebSocket-—Å–µ—Ä–≤–µ—Ä–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ"""
        server = await websockets.serve(
        functools.partial(self.local_server, voice=voice),  # Correct way to pass 'voice'
        "localhost",
        8765
    )
        print("‚úÖ –õ–æ–∫–∞–ª—å–Ω—ã–π WebSocket-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ ws://localhost:8765")
        await server.wait_closed()

    async def insert_voice(self):
        """
        –¶–∏–∫–ª, –∫–æ—Ç–æ—Ä—ã–π –±–µ—Ä–µ—Ç –ø–∞–∫–µ—Ç—ã –∏–∑ self.voice_queue –∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∏—Ö
        –ø–æ –Ω—É–∂–Ω–æ–º—É Speaker, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç user_id. –ü–æ—Ç–æ–º Speaker
        –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Ö –≤ Deepgram –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è.
        """
        while self.running:
            current_time = time.time()
            if not self.voice_queue.empty():
                while not self.voice_queue.empty():
                    item = await self.voice_queue.get()
                    user_id = item[0]
                    data_bytes = item[1]

                    user_exists = False
                    for speaker in self.speakers:
                        if speaker.user is None:
                            speaker.add_user(user_id)

                        if speaker.isNeededRetry:
                            await asyncio.sleep(1)
                            await self.remove_speaker(speaker.user)
                            continue
                        
                        if user_id == speaker.user:
                            speaker.add_data(data_bytes, current_time)
                            user_exists = True
                            break
                    
                    if not user_exists:
                        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ —Å–ø–∏–∫–µ—Ä–∞, –µ—Å–ª–∏ –ª–∏–º–∏—Ç –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω
                        # if self.sink_settings.max_speakers < 0 or \
                        #    len(self.speakers) < self.sink_settings.max_speakers:
                        sp = Speaker(
                                self.loop,
                                self.queue,
                                self.sink_settings.deepgram_API_key,
                                self.sink_settings.sentence_end,
                                self.sink_settings.utterence_end
                        )
                        self.speakers.append(sp)
                        sp.add_user(user_id)
                        sp.add_data(data_bytes, current_time)
            else:
                await asyncio.sleep(.02)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—é
            for speaker in self.speakers:
                #Transcribe when new data is available
                if speaker.new_bytes:
                    speaker.state = speaker.SpeakerState.TRANSCRIBE
                #finalize data if X seconds passes from last data packet from discord
                elif current_time > speaker.last_byte + speaker.utterance_end/1000:
                    speaker.state = speaker.SpeakerState.FINALIZE   
                #add silence to help process utterance
                elif  current_time > speaker.last_byte + speaker.sentence_end/1000:
                    speaker.add_silence()
        # –ò—Ç–µ—Ä–∏—Ä—É–µ–º –ø–æ –∫–æ–ø–∏–∏ —Å–ø–∏—Å–∫–∞, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ —É–¥–∞–ª—è—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã
            # for speaker in self.speakers[:]:# THIS FUNCTIONALITY OF REMOVING THE SAME USER IS UNSTABLE TEST IT ONCE BUG WITH SAME USE APPEAR !!!!!!!!!
            #     if speaker.user in seen_users:
            #         # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º id —É–∂–µ –≤—Å—Ç—Ä–µ—á–∞–ª—Å—è, —É–¥–∞–ª—è–µ–º —Å–ø–∏–∫–µ—Ä–∞
            #         await self.remove_speaker(speaker.user)
            #         self.speakers.remove(speaker)
            #     else:
            #         seen_users.add(speaker.user)
                # –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –±–∞–π—Ç–∞ => FINALIZE
                # elif current_time > speaker.last_byte + (speaker.utterance_end / 1000):
                #     # –ú–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å —ç—Ç–æ—Ç –±–ª–æ–∫, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –≤–æ–æ–±—â–µ –Ω–µ —Ñ–∏–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å
                #     speaker.state = speaker.SpeakerState.FINALIZE

                # –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ sentence_end –º—Å —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –±–∞–π—Ç–∞ => –¥–æ–±–∞–≤–ª—è–µ–º —Ç–∏—à–∏–Ω—É
                # elif current_time > speaker.last_byte + (speaker.sentence_end / 1000):
                #     speaker.add_silence()

        # –ï—Å–ª–∏ running=False, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ Speaker
        for speaker in self.speakers:
            speaker.state = speaker.SpeakerState.STOP
     
    async def remove_speaker(self, user_id):
        try:
            for speaker in self.speakers.copy():
                if speaker.user == user_id and speaker.isNeededRetry:
                    self.speakers.remove(speaker)
                    print(f"Speaker —Å user_id {user_id} —É–¥–∞–ª—ë–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ speakers.")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ remove_speaker: {e}")
        

    @Filters.container
    def write(self, data, user_id):
        """
        –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—á–µ—Ä–µ–¥–Ω–æ–≥–æ –ø–∞–∫–µ—Ç–∞ –∞—É–¥–∏–æ –æ—Ç Discord.
        :param data: –∞—É–¥–∏–æ–¥–∞–Ω–Ω—ã–µ
        :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –≥–æ–≤–æ—Ä–∏—Ç
        """
        try:
            data_len = len(data)
            if data_len > self.sink_settings.data_length:
                cutoff = self.sink_settings.data_length - int(self.sink_settings.data_length / 10)
                data = data[-cutoff:]

            self.voice_queue.put_nowait([user_id, data])

        except Exception as e:
        # –ú–æ–∂–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å –≤ –ª–æ–≥–∏ –∏–ª–∏ –≤—ã–≤–µ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
            print(f"–û—à–∏–±–∫–∞ –≤ write(): {e}")

    def close(self):
        """
        –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –≤—Å—Ç–∞–≤–∫–∏ –≥–æ–ª–æ—Å–∞ –∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å–µ—Ö —Å–ø–∏–∫–µ—Ä–æ–≤.
        """
        self.running = False
        self.queue.put_nowait(None)  # –ü–æ–ª–æ–∂–∏–º None, —á—Ç–æ–±—ã –≤ –¥—Ä—É–≥–æ–º –º–µ—Å—Ç–µ –∑–∞–≤–µ—Ä—à–∞–ª—Å—è —Ü–∏–∫–ª
